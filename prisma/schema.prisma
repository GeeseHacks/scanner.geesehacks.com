generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}


datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}

model User {
  id                         Int                     @id
  firstname                  String                  @db.VarChar(50)
  lastname                   String                  @db.VarChar(50)
  age                        Int
  email                      String                  @unique @db.VarChar(100)
  phone_number               String                  @db.VarChar(20)
  school                     String                  @db.VarChar(100)
  level_of_study             String                  @db.VarChar(100)
  country_of_residence       String                  @db.VarChar(255)
  address                    String?                 @db.VarChar(255)
  dietary_restrictions       String                  @db.VarChar(100)
  github                     String?                 @db.VarChar(255)
  linkedin                   String?                 @db.VarChar(255)
  personal_website           String?                 @db.VarChar(255)
  MLH_authorize              Boolean?
  field_of_study             String                  @db.VarChar(100)
  optional_consider          String?                 @db.VarChar(255)
  optional_gender            String?                 @db.VarChar(50)
  optional_pronouns          String?                 @db.VarChar(50)
  optional_race              String?                 @db.VarChar(50)
  optional_underrepresented  String?
  other_dietary_restrictions String?                 @db.VarChar(100)
  resume                     String?                 @db.VarChar(255)
  t_shirt_size               String?                 @db.VarChar(50)
  status                     UserStatus


  application_responses      ApplicationResponse[] // Define the relation to application_responses -- Not an actual field in the DB schema
  qrCodes QRCodeRegistered[] // User can have multiple QR Codes
}

enum UserStatus {
  ACCEPTED
  REJECTED
  WAITLIST
  APPLIED
  NOT_APPLIED
}

model ApplicationResponse {
  id     Int    @id @default(autoincrement())
  userid Int
  q1     String @db.VarChar(1000)
  q2     String @db.VarChar(1000)
  q3     String @db.VarChar(1000)
  user   User  @relation(fields: [userid], references: [id])

  @@index([userid])
}

model UserAuth {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(60)
}

model QRCodeRegistered {
  qrCodeId  String @id @db.VarChar(255)
  userid    Int
  user      User   @relation(fields: [userid], references: [id])

  @@index([userid])
}