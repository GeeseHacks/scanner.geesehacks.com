generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                         String                @id @db.VarChar(36)
  firstname                  String                @db.VarChar(50)
  lastname                   String                @db.VarChar(50)
  age                        Int
  email                      String                @unique @db.VarChar(100)
  phone_number               String                @db.VarChar(20)
  school                     String                @db.VarChar(100)
  level_of_study             String                @db.VarChar(100)
  country_of_residence       String                @db.VarChar(255)
  dietary_restrictions       String                @db.VarChar(100)
  github                     String?               @db.VarChar(255)
  linkedin                   String?               @db.VarChar(255)
  personal_website           String?               @db.VarChar(255)
  MLH_authorize              Boolean?
  field_of_study             String                @db.VarChar(100)
  optional_consider          String?               @db.VarChar(255)
  optional_gender            String?               @db.VarChar(50)
  optional_pronouns          String?               @db.VarChar(50)
  optional_race              String?               @db.VarChar(50)
  optional_underrepresented  String?
  other_dietary_restrictions String?               @db.VarChar(100)
  resume                     String?               @db.VarChar(255)
  t_shirt_size               String?               @db.VarChar(50)
  status                     UserStatus
  event_qr_code              String?               @unique @db.VarChar(255)
  attendedEventIds           Json?
  net_worth                  Int                   @default(0)
  project_id                 String?               @db.Uuid
  application_responses      ApplicationResponse[]

  @@index([project_id])
}

model ApplicationResponse {
  id     String @id @db.VarChar(36)
  userid String
  q1     String @db.VarChar(1000)
  q2     String @db.VarChar(1000)
  user   User   @relation(fields: [userid], references: [id])

  @@index([userid])
}

model UserAuth {
  id              String    @id @db.VarChar(36)
  email           String    @unique @db.VarChar(100)
  password        String    @db.VarChar(60)
  resetToken      String?   @db.VarChar(255)
  tokenExpiration DateTime?
}

model ScannerUserAuth {
  id       String @id @db.VarChar(36)
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(60)
}

model Judge {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(255)
  availableFunds    Int                 @default(10000)
  login_key         String              @unique @db.VarChar(255)
  InvestmentHistory InvestmentHistory[]
  JudgeCategory     JudgeCategory[]
  JudgeProject      JudgeProject[]

  @@index([name])
}

model Project {
  name              String              @db.VarChar(255)
  description       String              @db.VarChar(255)
  devpostLink       String              @db.VarChar(255)
  imageUrl          String?             @db.VarChar(255)
  id                String              @id @db.Uuid
  InvestmentHistory InvestmentHistory[]
  JudgeProject      JudgeProject[]
  ProjectCategory   ProjectCategory[]

  @@index([name])
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  JudgeCategory   JudgeCategory[]
  ProjectCategory ProjectCategory[]
}

model InvestmentHistory {
  id           Int      @id @default(autoincrement())
  projectValue Int
  judgeId      Int
  projectId    String   @db.Uuid
  createdAt    DateTime @default(now())
  Judge        Judge    @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  Project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([judgeId])
  @@index([judgeId, projectId])
  @@index([projectId])
}

model JudgeCategory {
  judgeId    Int
  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Judge      Judge    @relation(fields: [judgeId], references: [id], onDelete: Cascade)

  @@id([judgeId, categoryId])
  @@index([categoryId])
  @@index([judgeId])
}

model JudgeProject {
  judgeId   Int
  projectId String  @db.Uuid
  Judge     Judge   @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([judgeId, projectId])
  @@index([judgeId])
}

model ProjectCategory {
  projectId        String   @db.Uuid
  categoryId       Int
  investmentAmount Int
  Category         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, categoryId])
  @@index([categoryId])
}

enum UserStatus {
  ACCEPTED
  REJECTED
  WAITLIST
  NOT_APPLIED
  APPLIED
  CONFIRMED
}
